{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "legendarydfv2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "empty"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "empty"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"policyId": {
							"type": "string"
						},
						"submissionId": {
							"type": "string"
						},
						"documents": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"document": {
										"type": "string"
									},
									"documentContext": {
										"type": "string"
									},
									"referenceDocumentId": {
										"type": "string"
									},
									"submissions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"submissionsVersion": {
													"type": "string"
												},
												"parties": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"status": {
																"type": "string"
															},
															"partyId": {
																"type": "string"
															},
															"policyRole": {
																"type": "string"
															},
															"updateTime": {
																"type": "string"
															},
															"IPAddress": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									},
									"policies": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"policyTerm": {
													"type": "string"
												},
												"parties": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"status": {
																"type": "string"
															},
															"partyId": {
																"type": "string"
															},
															"policyRole": {
																"type": "string"
															},
															"updateTime": {
																"type": "string"
															},
															"IPAddress": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "data_99750ed6-841b-4f58-8afe-58c4224a6b18_a2531511-c732-4eb6-a9f8-89cea45ad2d9.parquet",
						"container": "empty"
					},
					"compressionCodec": "none"
				},
				"schema": [
					{
						"name": "policyId",
						"type": "UTF8"
					},
					{
						"name": "submissionId",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline2",
						"type": "PipelineReference"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2019-04-27T06:15:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlDWTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\t{_id} as ({$oid} as string),\n\t\tdocuments as (document as string, documentContext as string, policies as (parties as (IPAddress as string, partyId as string, policyRole as string, status as string, updateTime as string)[], policyTerm as string)[], referenceDocumentId as string, submissions as (parties as (IPAddress as string, partyId as string, policyRole as string, status as string, updateTime as string)[], submissionsVersion as string)[])[],\n\t\tpolicyId as string,\n\t\tsubmissionId as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tsingleDocument: true) ~> source1\nsource1 derive(Date = toTimestamp(documents[0].submissions[0].parties[0].updateTime),\n\t\tIPAddress = documents[0].submissions[0].parties[0].IPAddress,\n\t\tpolicyId = policyId,\n\t\tsubmissionId = submissionId) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\t{_id} as string,\n\t\tpartyId as string,\n\t\tupdateTime as string,\n\t\tIPAddress as string,\n\t\tdocumentContext as string,\n\t\tdocument as string,\n\t\tsubmissionId as string,\n\t\tsubmissionVersion as string,\n\t\tpolicyId as string,\n\t\treferenceDocumenId as string,\n\t\tstatus as string,\n\t\tpolicyRole as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: false,\n\tmapColumn(\n\t\tupdateTime = Date\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		}
	]
}