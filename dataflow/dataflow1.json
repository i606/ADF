{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlDWTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn1"
				}
			],
			"script": "\n\nsource(output(\n\t\t{_id} as ({$oid} as string),\n\t\tdocuments as (document as string, documentContext as string, policies as (parties as (IPAddress as string, partyId as string, policyRole as string, status as string, updateTime as string)[], policyTerm as string)[], referenceDocumentId as string, submissions as (parties as (IPAddress as string, partyId as string, policyRole as string, status as string, updateTime as string)[], submissionsVersion as string)[])[],\n\t\tpolicyId as string,\n\t\tsubmissionId as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tsingleDocument: true) ~> source1\nsource1 derive(Date = toTimestamp(documents[0].submissions[0].parties[0].updateTime),\n\t\tIPAddress = documents[0].submissions[0].parties[0].IPAddress) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\t{_id} as string,\n\t\tpartyId as string,\n\t\tupdateTime as string,\n\t\tIPAddress as string,\n\t\tdocumentContext as string,\n\t\tdocument as string,\n\t\tsubmissionId as string,\n\t\tsubmissionVersion as string,\n\t\tpolicyId as string,\n\t\treferenceDocumenId as string,\n\t\tstatus as string,\n\t\tpolicyRole as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: false,\n\tmapColumn(\n\t\tsubmissionId,\n\t\tpolicyId,\n\t\t{_id}\n\t)) ~> sink1"
		}
	}
}